generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  name     String
  password String
  email    String

  isEmailVerified Boolean @default(false)

  phone        String
  city         String?
  index        String?
  avatar       String?
  deliveryType DeliveryType? @map("delivery_type")
  paymentType  PaymentType?  @map("payment_type")
  address      String?
  role         Role          @default(USER)

  orders           Order[]
  reviews          Review[]
  favoriteProducts FavoriteProduct[]
  cartProducts     CartProduct[]
  compareItems     CompareItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id String @id @default(uuid())

  name           String
  price          Int
  oldPrice       Int?            @map("old_price")
  brand          String
  description    String
  sales          Int             @default(0)
  status         ProductStatus
  quantity       Int             @default(0)
  images         String[]
  specifications Specification[]
  rating         Float           @default(0)

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String   @map("category_id")

  reviews          Review[]
  product          CartProduct[]
  favoriteProducts FavoriteProduct[]
  orderItem        OrderItem[]
  compareItems     CompareItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id String @id @default(uuid())

  rating  Float
  title   String
  comment String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")

  createdAt DateTime @default(now())
}

model Specification {
  id String @id @default(uuid())

  title String
  value String?

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")

  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String   @map("category_id")
}

model Category {
  id String @id @default(uuid())

  name           String
  products       Product[]
  specifications Specification[]
}

model CartProduct {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")
  quantity  Int
  order     Order?  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String? @map("order_id")

  createdAt DateTime @default(now())
}

model Order {
  id String @id @default(uuid())

  status       OrderStatus
  deliveryType DeliveryType
  deliveryFlat String?
  deliveryDate String?
  city         String
  street       String
  paymentType  PaymentType

  index     String?
  username  String
  userPhone String
  userEmail String
  comment   String?

  totalPrice Int
  products   CartProduct[]
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String        @map("user_id")
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id String @id @default(uuid())

  quantity Int

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String @map("order_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model News {
  id String @id @default(uuid())

  image String?
  title String
  text  String

  createdAt DateTime @default(now())
}

model FavoriteProduct {
  id String @id @default(uuid())

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @map("user_id")
}

model Promo {
  id String @id @default(uuid())

  title String
  text  String

  preview String
  image   String
}

model Vacancy {
  id String @id @default(uuid())

  title        String
  weLookFor    String[]
  requirements String[]
  conditions   String[]

  createdAt DateTime @default(now())
}

model CompareItem {
  id String @id @default(uuid())

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")
}

enum Role {
  ADMIN
  USER
}

enum ProductStatus {
  AVAILABLE
  UNAVAILABLE
}

enum PaymentType {
  CASH
  CARD
}

enum DeliveryType {
  PICKUP
  DELIVERY
}

enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELED
}
